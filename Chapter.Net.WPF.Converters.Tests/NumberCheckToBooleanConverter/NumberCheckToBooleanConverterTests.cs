// -----------------------------------------------------------------------------------------------------------------
// <copyright file="NumberCheckToBooleanConverterTests.cs" company="my-libraries">
//     Copyright (c) David Wendland. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Numerics;
using NUnit.Framework;

// ReSharper disable once CheckNamespace

namespace Chapter.Net.WPF.Converters.Tests;

public class NumberCheckToBooleanConverterTests : SingleAndMultiValueConverterTester<NumberCheckToBooleanConverter>
{
    [TestCase(NumberCheckType.IsNegative, true, false, -5, true)]
    [TestCase(NumberCheckType.IsNegative, false, false, -5, false)]
    [TestCase(NumberCheckType.IsNegative, null, false, -5, null)]
    [TestCase(NumberCheckType.IsNegative, true, true, 5, true)]
    [TestCase(NumberCheckType.IsNegative, true, false, 5, false)]
    [TestCase(NumberCheckType.IsNegative, true, null, 5, null)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, int.MaxValue, true)]
    [TestCase(NumberCheckType.IsMaxValue, false, false, int.MaxValue, false)]
    [TestCase(NumberCheckType.IsMaxValue, null, false, int.MaxValue, null)]
    [TestCase(NumberCheckType.IsMaxValue, true, true, 5, true)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, 5, false)]
    [TestCase(NumberCheckType.IsMaxValue, true, null, 5, null)]
    [TestCase(NumberCheckType.IsMinValue, true, false, int.MinValue, true)]
    [TestCase(NumberCheckType.IsMinValue, false, false, int.MinValue, false)]
    [TestCase(NumberCheckType.IsMinValue, null, false, int.MinValue, null)]
    [TestCase(NumberCheckType.IsMinValue, true, true, 5, true)]
    [TestCase(NumberCheckType.IsMinValue, true, false, 5, false)]
    [TestCase(NumberCheckType.IsMinValue, true, null, 5, null)]
    [TestCase(NumberCheckType.IsEven, true, false, 4, true)]
    [TestCase(NumberCheckType.IsEven, false, false, 4, false)]
    [TestCase(NumberCheckType.IsEven, null, false, 4, null)]
    [TestCase(NumberCheckType.IsEven, true, true, 5, true)]
    [TestCase(NumberCheckType.IsEven, true, false, 5, false)]
    [TestCase(NumberCheckType.IsEven, true, null, 5, null)]
    [TestCase(NumberCheckType.IsOdd, true, false, 5, true)]
    [TestCase(NumberCheckType.IsOdd, false, false, 5, false)]
    [TestCase(NumberCheckType.IsOdd, null, false, 5, null)]
    [TestCase(NumberCheckType.IsOdd, true, true, 4, true)]
    [TestCase(NumberCheckType.IsOdd, true, false, 4, false)]
    [TestCase(NumberCheckType.IsOdd, true, null, 4, null)]
    [TestCase(NumberCheckType.IsNaN, true, true, 5, true)]
    [TestCase(NumberCheckType.IsNaN, true, false, 5, false)]
    [TestCase(NumberCheckType.IsNaN, true, null, 5, null)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, true, 5, true)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, false, 5, false)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, null, 5, null)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, true, 5, true)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, false, 5, false)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, null, 5, null)]
    [TestCase(NumberCheckType.IsZero, true, true, 0, true)]
    [TestCase(NumberCheckType.IsZero, false, true, 0, false)]
    [TestCase(NumberCheckType.IsZero, null, true, 0, null)]
    [TestCase(NumberCheckType.IsZero, true, true, 5, true)]
    [TestCase(NumberCheckType.IsZero, true, false, 5, false)]
    [TestCase(NumberCheckType.IsZero, true, null, 5, null)]
    [TestCase(NumberCheckType.IsNegative, true, false, (short)-5, true)]
    [TestCase(NumberCheckType.IsNegative, false, false, (short)-5, false)]
    [TestCase(NumberCheckType.IsNegative, null, false, (short)-5, null)]
    [TestCase(NumberCheckType.IsNegative, true, true, (short)5, true)]
    [TestCase(NumberCheckType.IsNegative, true, false, (short)5, false)]
    [TestCase(NumberCheckType.IsNegative, true, null, (short)5, null)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, short.MaxValue, true)]
    [TestCase(NumberCheckType.IsMaxValue, false, false, short.MaxValue, false)]
    [TestCase(NumberCheckType.IsMaxValue, null, false, short.MaxValue, null)]
    [TestCase(NumberCheckType.IsMaxValue, true, true, (short)5, true)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, (short)5, false)]
    [TestCase(NumberCheckType.IsMaxValue, true, null, (short)5, null)]
    [TestCase(NumberCheckType.IsMinValue, true, false, short.MinValue, true)]
    [TestCase(NumberCheckType.IsMinValue, false, false, short.MinValue, false)]
    [TestCase(NumberCheckType.IsMinValue, null, false, short.MinValue, null)]
    [TestCase(NumberCheckType.IsMinValue, true, true, (short)5, true)]
    [TestCase(NumberCheckType.IsMinValue, true, false, (short)5, false)]
    [TestCase(NumberCheckType.IsMinValue, true, null, (short)5, null)]
    [TestCase(NumberCheckType.IsEven, true, false, (short)4, true)]
    [TestCase(NumberCheckType.IsEven, false, false, (short)4, false)]
    [TestCase(NumberCheckType.IsEven, null, false, (short)4, null)]
    [TestCase(NumberCheckType.IsEven, true, true, (short)5, true)]
    [TestCase(NumberCheckType.IsEven, true, false, (short)5, false)]
    [TestCase(NumberCheckType.IsEven, true, null, (short)5, null)]
    [TestCase(NumberCheckType.IsOdd, true, false, (short)5, true)]
    [TestCase(NumberCheckType.IsOdd, false, false, (short)5, false)]
    [TestCase(NumberCheckType.IsOdd, null, false, (short)5, null)]
    [TestCase(NumberCheckType.IsOdd, true, true, (short)4, true)]
    [TestCase(NumberCheckType.IsOdd, true, false, (short)4, false)]
    [TestCase(NumberCheckType.IsOdd, true, null, (short)4, null)]
    [TestCase(NumberCheckType.IsNaN, true, true, (short)5, true)]
    [TestCase(NumberCheckType.IsNaN, true, false, (short)5, false)]
    [TestCase(NumberCheckType.IsNaN, true, null, (short)5, null)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, true, (short)5, true)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, false, (short)5, false)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, null, (short)5, null)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, true, (short)5, true)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, false, (short)5, false)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, null, (short)5, null)]
    [TestCase(NumberCheckType.IsZero, true, true, (short)0, true)]
    [TestCase(NumberCheckType.IsZero, false, true, (short)0, false)]
    [TestCase(NumberCheckType.IsZero, null, true, (short)0, null)]
    [TestCase(NumberCheckType.IsZero, true, true, (short)5, true)]
    [TestCase(NumberCheckType.IsZero, true, false, (short)5, false)]
    [TestCase(NumberCheckType.IsZero, true, null, (short)5, null)]
    [TestCase(NumberCheckType.IsNegative, true, false, -5d, true)]
    [TestCase(NumberCheckType.IsNegative, false, false, -5d, false)]
    [TestCase(NumberCheckType.IsNegative, null, false, -5d, null)]
    [TestCase(NumberCheckType.IsNegative, true, true, 5d, true)]
    [TestCase(NumberCheckType.IsNegative, true, false, 5d, false)]
    [TestCase(NumberCheckType.IsNegative, true, null, 5d, null)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, double.MaxValue, true)]
    [TestCase(NumberCheckType.IsMaxValue, false, false, double.MaxValue, false)]
    [TestCase(NumberCheckType.IsMaxValue, null, false, double.MaxValue, null)]
    [TestCase(NumberCheckType.IsMaxValue, true, true, 5d, true)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, 5d, false)]
    [TestCase(NumberCheckType.IsMaxValue, true, null, 5d, null)]
    [TestCase(NumberCheckType.IsMinValue, true, false, double.MinValue, true)]
    [TestCase(NumberCheckType.IsMinValue, false, false, double.MinValue, false)]
    [TestCase(NumberCheckType.IsMinValue, null, false, double.MinValue, null)]
    [TestCase(NumberCheckType.IsMinValue, true, true, 5d, true)]
    [TestCase(NumberCheckType.IsMinValue, true, false, 5d, false)]
    [TestCase(NumberCheckType.IsMinValue, true, null, 5d, null)]
    [TestCase(NumberCheckType.IsEven, true, false, 4d, true)]
    [TestCase(NumberCheckType.IsEven, false, false, 4d, false)]
    [TestCase(NumberCheckType.IsEven, null, false, 4d, null)]
    [TestCase(NumberCheckType.IsEven, true, true, 5d, true)]
    [TestCase(NumberCheckType.IsEven, true, false, 5d, false)]
    [TestCase(NumberCheckType.IsEven, true, null, 5d, null)]
    [TestCase(NumberCheckType.IsOdd, true, false, 5d, true)]
    [TestCase(NumberCheckType.IsOdd, false, false, 5d, false)]
    [TestCase(NumberCheckType.IsOdd, null, false, 5d, null)]
    [TestCase(NumberCheckType.IsOdd, true, true, 4d, true)]
    [TestCase(NumberCheckType.IsOdd, true, false, 4d, false)]
    [TestCase(NumberCheckType.IsOdd, true, null, 4d, null)]
    [TestCase(NumberCheckType.IsNaN, true, false, double.NaN, true)]
    [TestCase(NumberCheckType.IsNaN, false, false, double.NaN, false)]
    [TestCase(NumberCheckType.IsNaN, null, false, double.NaN, null)]
    [TestCase(NumberCheckType.IsNaN, true, true, 5d, true)]
    [TestCase(NumberCheckType.IsNaN, true, false, 5d, false)]
    [TestCase(NumberCheckType.IsNaN, true, null, 5d, null)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, false, double.NegativeInfinity, true)]
    [TestCase(NumberCheckType.IsNegativeInfinity, false, false, double.NegativeInfinity, false)]
    [TestCase(NumberCheckType.IsNegativeInfinity, null, false, double.NegativeInfinity, null)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, true, 5d, true)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, false, 5d, false)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, null, 5d, null)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, false, double.PositiveInfinity, true)]
    [TestCase(NumberCheckType.IsPositiveInfinity, false, false, double.PositiveInfinity, false)]
    [TestCase(NumberCheckType.IsPositiveInfinity, null, false, double.PositiveInfinity, null)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, true, 5d, true)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, false, 5d, false)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, null, 5d, null)]
    [TestCase(NumberCheckType.IsZero, true, true, 0d, true)]
    [TestCase(NumberCheckType.IsZero, false, true, 0d, false)]
    [TestCase(NumberCheckType.IsZero, null, true, 0d, null)]
    [TestCase(NumberCheckType.IsZero, true, true, 5d, true)]
    [TestCase(NumberCheckType.IsZero, true, false, 5d, false)]
    [TestCase(NumberCheckType.IsZero, true, null, 5d, null)]
    [TestCase(NumberCheckType.IsNegative, true, false, -5f, true)]
    [TestCase(NumberCheckType.IsNegative, false, false, -5f, false)]
    [TestCase(NumberCheckType.IsNegative, null, false, -5f, null)]
    [TestCase(NumberCheckType.IsNegative, true, true, 5f, true)]
    [TestCase(NumberCheckType.IsNegative, true, false, 5f, false)]
    [TestCase(NumberCheckType.IsNegative, true, null, 5f, null)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, float.MaxValue, true)]
    [TestCase(NumberCheckType.IsMaxValue, false, false, float.MaxValue, false)]
    [TestCase(NumberCheckType.IsMaxValue, null, false, float.MaxValue, null)]
    [TestCase(NumberCheckType.IsMaxValue, true, true, 5f, true)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, 5f, false)]
    [TestCase(NumberCheckType.IsMaxValue, true, null, 5f, null)]
    [TestCase(NumberCheckType.IsMinValue, true, false, float.MinValue, true)]
    [TestCase(NumberCheckType.IsMinValue, false, false, float.MinValue, false)]
    [TestCase(NumberCheckType.IsMinValue, null, false, float.MinValue, null)]
    [TestCase(NumberCheckType.IsMinValue, true, true, 5f, true)]
    [TestCase(NumberCheckType.IsMinValue, true, false, 5f, false)]
    [TestCase(NumberCheckType.IsMinValue, true, null, 5f, null)]
    [TestCase(NumberCheckType.IsEven, true, false, 4f, true)]
    [TestCase(NumberCheckType.IsEven, false, false, 4f, false)]
    [TestCase(NumberCheckType.IsEven, null, false, 4f, null)]
    [TestCase(NumberCheckType.IsEven, true, true, 5f, true)]
    [TestCase(NumberCheckType.IsEven, true, false, 5f, false)]
    [TestCase(NumberCheckType.IsEven, true, null, 5f, null)]
    [TestCase(NumberCheckType.IsOdd, true, false, 5f, true)]
    [TestCase(NumberCheckType.IsOdd, false, false, 5f, false)]
    [TestCase(NumberCheckType.IsOdd, null, false, 5f, null)]
    [TestCase(NumberCheckType.IsOdd, true, true, 4f, true)]
    [TestCase(NumberCheckType.IsOdd, true, false, 4f, false)]
    [TestCase(NumberCheckType.IsOdd, true, null, 4f, null)]
    [TestCase(NumberCheckType.IsNaN, true, false, float.NaN, true)]
    [TestCase(NumberCheckType.IsNaN, false, false, float.NaN, false)]
    [TestCase(NumberCheckType.IsNaN, null, false, float.NaN, null)]
    [TestCase(NumberCheckType.IsNaN, true, true, 5f, true)]
    [TestCase(NumberCheckType.IsNaN, true, false, 5f, false)]
    [TestCase(NumberCheckType.IsNaN, true, null, 5f, null)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, false, float.NegativeInfinity, true)]
    [TestCase(NumberCheckType.IsNegativeInfinity, false, false, float.NegativeInfinity, false)]
    [TestCase(NumberCheckType.IsNegativeInfinity, null, false, float.NegativeInfinity, null)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, true, 5f, true)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, false, 5f, false)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, null, 5f, null)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, false, float.PositiveInfinity, true)]
    [TestCase(NumberCheckType.IsPositiveInfinity, false, false, float.PositiveInfinity, false)]
    [TestCase(NumberCheckType.IsPositiveInfinity, null, false, float.PositiveInfinity, null)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, true, 5f, true)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, false, 5f, false)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, null, 5f, null)]
    [TestCase(NumberCheckType.IsZero, true, true, 0f, true)]
    [TestCase(NumberCheckType.IsZero, false, true, 0f, false)]
    [TestCase(NumberCheckType.IsZero, null, true, 0f, null)]
    [TestCase(NumberCheckType.IsZero, true, true, 5f, true)]
    [TestCase(NumberCheckType.IsZero, true, false, 5f, false)]
    [TestCase(NumberCheckType.IsZero, true, null, 5f, null)]
    [TestCase(NumberCheckType.IsNegative, true, false, (sbyte)-5, true)]
    [TestCase(NumberCheckType.IsNegative, false, false, (sbyte)-5, false)]
    [TestCase(NumberCheckType.IsNegative, null, false, (sbyte)-5, null)]
    [TestCase(NumberCheckType.IsNegative, true, true, (sbyte)5, true)]
    [TestCase(NumberCheckType.IsNegative, true, false, (sbyte)5, false)]
    [TestCase(NumberCheckType.IsNegative, true, null, (sbyte)5, null)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, sbyte.MaxValue, true)]
    [TestCase(NumberCheckType.IsMaxValue, false, false, sbyte.MaxValue, false)]
    [TestCase(NumberCheckType.IsMaxValue, null, false, sbyte.MaxValue, null)]
    [TestCase(NumberCheckType.IsMaxValue, true, true, (sbyte)5, true)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, (sbyte)5, false)]
    [TestCase(NumberCheckType.IsMaxValue, true, null, (sbyte)5, null)]
    [TestCase(NumberCheckType.IsMinValue, true, false, sbyte.MinValue, true)]
    [TestCase(NumberCheckType.IsMinValue, false, false, sbyte.MinValue, false)]
    [TestCase(NumberCheckType.IsMinValue, null, false, sbyte.MinValue, null)]
    [TestCase(NumberCheckType.IsMinValue, true, true, (sbyte)5, true)]
    [TestCase(NumberCheckType.IsMinValue, true, false, (sbyte)5, false)]
    [TestCase(NumberCheckType.IsMinValue, true, null, (sbyte)5, null)]
    [TestCase(NumberCheckType.IsEven, true, false, (sbyte)4, true)]
    [TestCase(NumberCheckType.IsEven, false, false, (sbyte)4, false)]
    [TestCase(NumberCheckType.IsEven, null, false, (sbyte)4, null)]
    [TestCase(NumberCheckType.IsEven, true, true, (sbyte)5, true)]
    [TestCase(NumberCheckType.IsEven, true, false, (sbyte)5, false)]
    [TestCase(NumberCheckType.IsEven, true, null, (sbyte)5, null)]
    [TestCase(NumberCheckType.IsOdd, true, false, (sbyte)5, true)]
    [TestCase(NumberCheckType.IsOdd, false, false, (sbyte)5, false)]
    [TestCase(NumberCheckType.IsOdd, null, false, (sbyte)5, null)]
    [TestCase(NumberCheckType.IsOdd, true, true, (sbyte)4, true)]
    [TestCase(NumberCheckType.IsOdd, true, false, (sbyte)4, false)]
    [TestCase(NumberCheckType.IsOdd, true, null, (sbyte)4, null)]
    [TestCase(NumberCheckType.IsNaN, true, true, (sbyte)5, true)]
    [TestCase(NumberCheckType.IsNaN, true, false, (sbyte)5, false)]
    [TestCase(NumberCheckType.IsNaN, true, null, (sbyte)5, null)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, true, (sbyte)5, true)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, false, (sbyte)5, false)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, null, (sbyte)5, null)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, true, (sbyte)5, true)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, false, (sbyte)5, false)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, null, (sbyte)5, null)]
    [TestCase(NumberCheckType.IsZero, true, true, (sbyte)0, true)]
    [TestCase(NumberCheckType.IsZero, false, true, (sbyte)0, false)]
    [TestCase(NumberCheckType.IsZero, null, true, (sbyte)0, null)]
    [TestCase(NumberCheckType.IsZero, true, true, (sbyte)5, true)]
    [TestCase(NumberCheckType.IsZero, true, false, (sbyte)5, false)]
    [TestCase(NumberCheckType.IsZero, true, null, (sbyte)5, null)]
    [TestCase(NumberCheckType.IsNegative, true, false, (long)-5, true)]
    [TestCase(NumberCheckType.IsNegative, false, false, (long)-5, false)]
    [TestCase(NumberCheckType.IsNegative, null, false, (long)-5, null)]
    [TestCase(NumberCheckType.IsNegative, true, true, (long)5, true)]
    [TestCase(NumberCheckType.IsNegative, true, false, (long)5, false)]
    [TestCase(NumberCheckType.IsNegative, true, null, (long)5, null)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, long.MaxValue, true)]
    [TestCase(NumberCheckType.IsMaxValue, false, false, long.MaxValue, false)]
    [TestCase(NumberCheckType.IsMaxValue, null, false, long.MaxValue, null)]
    [TestCase(NumberCheckType.IsMaxValue, true, true, (long)5, true)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, (long)5, false)]
    [TestCase(NumberCheckType.IsMaxValue, true, null, (long)5, null)]
    [TestCase(NumberCheckType.IsMinValue, true, false, long.MinValue, true)]
    [TestCase(NumberCheckType.IsMinValue, false, false, long.MinValue, false)]
    [TestCase(NumberCheckType.IsMinValue, null, false, long.MinValue, null)]
    [TestCase(NumberCheckType.IsMinValue, true, true, (long)5, true)]
    [TestCase(NumberCheckType.IsMinValue, true, false, (long)5, false)]
    [TestCase(NumberCheckType.IsMinValue, true, null, (long)5, null)]
    [TestCase(NumberCheckType.IsEven, true, false, (long)4, true)]
    [TestCase(NumberCheckType.IsEven, false, false, (long)4, false)]
    [TestCase(NumberCheckType.IsEven, null, false, (long)4, null)]
    [TestCase(NumberCheckType.IsEven, true, true, (long)5, true)]
    [TestCase(NumberCheckType.IsEven, true, false, (long)5, false)]
    [TestCase(NumberCheckType.IsEven, true, null, (long)5, null)]
    [TestCase(NumberCheckType.IsOdd, true, false, (long)5, true)]
    [TestCase(NumberCheckType.IsOdd, false, false, (long)5, false)]
    [TestCase(NumberCheckType.IsOdd, null, false, (long)5, null)]
    [TestCase(NumberCheckType.IsOdd, true, true, (long)4, true)]
    [TestCase(NumberCheckType.IsOdd, true, false, (long)4, false)]
    [TestCase(NumberCheckType.IsOdd, true, null, (long)4, null)]
    [TestCase(NumberCheckType.IsNaN, true, true, (long)5, true)]
    [TestCase(NumberCheckType.IsNaN, true, false, (long)5, false)]
    [TestCase(NumberCheckType.IsNaN, true, null, (long)5, null)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, true, (long)5, true)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, false, (long)5, false)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, null, (long)5, null)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, true, (long)5, true)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, false, (long)5, false)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, null, (long)5, null)]
    [TestCase(NumberCheckType.IsZero, true, true, (long)0, true)]
    [TestCase(NumberCheckType.IsZero, false, true, (long)0, false)]
    [TestCase(NumberCheckType.IsZero, null, true, (long)0, null)]
    [TestCase(NumberCheckType.IsZero, true, true, (long)5, true)]
    [TestCase(NumberCheckType.IsZero, true, false, (long)5, false)]
    [TestCase(NumberCheckType.IsZero, true, null, (long)5, null)]
    public void Convert_Called_Converts(NumberCheckType checkType, bool? trueIs, bool? falseIs, object input, bool? expectation)
    {
        _target.CheckType = checkType;
        _target.TrueIs = trueIs;
        _target.FalseIs = falseIs;

        Convert(input, expectation);
    }

    [TestCase(NumberCheckType.IsNegative, true, false, -5, true)]
    [TestCase(NumberCheckType.IsNegative, false, false, -5, false)]
    [TestCase(NumberCheckType.IsNegative, null, false, -5, null)]
    [TestCase(NumberCheckType.IsNegative, true, true, 5, true)]
    [TestCase(NumberCheckType.IsNegative, true, false, 5, false)]
    [TestCase(NumberCheckType.IsNegative, true, null, 5, null)]
    [TestCase(NumberCheckType.IsMaxValue, true, true, 5, true)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, 5, false)]
    [TestCase(NumberCheckType.IsMaxValue, true, null, 5, null)]
    [TestCase(NumberCheckType.IsMinValue, true, true, 5, true)]
    [TestCase(NumberCheckType.IsMinValue, true, false, 5, false)]
    [TestCase(NumberCheckType.IsMinValue, true, null, 5, null)]
    [TestCase(NumberCheckType.IsEven, true, false, 4, true)]
    [TestCase(NumberCheckType.IsEven, false, false, 4, false)]
    [TestCase(NumberCheckType.IsEven, null, false, 4, null)]
    [TestCase(NumberCheckType.IsEven, true, true, 5, true)]
    [TestCase(NumberCheckType.IsEven, true, false, 5, false)]
    [TestCase(NumberCheckType.IsEven, true, null, 5, null)]
    [TestCase(NumberCheckType.IsOdd, true, false, 5, true)]
    [TestCase(NumberCheckType.IsOdd, false, false, 5, false)]
    [TestCase(NumberCheckType.IsOdd, null, false, 5, null)]
    [TestCase(NumberCheckType.IsOdd, true, true, 4, true)]
    [TestCase(NumberCheckType.IsOdd, true, false, 4, false)]
    [TestCase(NumberCheckType.IsOdd, true, null, 4, null)]
    [TestCase(NumberCheckType.IsNaN, true, true, 5, true)]
    [TestCase(NumberCheckType.IsNaN, true, false, 5, false)]
    [TestCase(NumberCheckType.IsNaN, true, null, 5, null)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, true, 5, true)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, false, 5, false)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, null, 5, null)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, true, 5, true)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, false, 5, false)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, null, 5, null)]
    [TestCase(NumberCheckType.IsZero, true, true, 0, true)]
    [TestCase(NumberCheckType.IsZero, false, true, 0, false)]
    [TestCase(NumberCheckType.IsZero, null, true, 0, null)]
    [TestCase(NumberCheckType.IsZero, true, true, 5, true)]
    [TestCase(NumberCheckType.IsZero, true, false, 5, false)]
    [TestCase(NumberCheckType.IsZero, true, null, 5, null)]
    public void Convert_Called_Converts(NumberCheckType checkType, bool? trueIs, bool? falseIs, decimal input, bool? expectation)
    {
        _target.CheckType = checkType;
        _target.TrueIs = trueIs;
        _target.FalseIs = falseIs;

        Convert(input, expectation);
    }

    [TestCase(NumberCheckType.IsMaxValue, true, false, true)]
    [TestCase(NumberCheckType.IsMaxValue, false, false, false)]
    [TestCase(NumberCheckType.IsMaxValue, null, false, null)]
    public void Convert_WithDecimalMaxValue_Converts(NumberCheckType checkType, bool? trueIs, bool? falseIs, bool? expectation)
    {
        _target.CheckType = checkType;
        _target.TrueIs = trueIs;
        _target.FalseIs = falseIs;

        Convert(decimal.MaxValue, expectation);
    }

    [TestCase(NumberCheckType.IsMinValue, true, false, true)]
    [TestCase(NumberCheckType.IsMinValue, false, false, false)]
    [TestCase(NumberCheckType.IsMinValue, null, false, null)]
    public void Convert_WithDecimalMinValue_Converts(NumberCheckType checkType, bool? trueIs, bool? falseIs, bool? expectation)
    {
        _target.CheckType = checkType;
        _target.TrueIs = trueIs;
        _target.FalseIs = falseIs;

        Convert(decimal.MinValue, expectation);
    }

    [TestCase(NumberCheckType.IsNegative, true, false, -5, true)]
    [TestCase(NumberCheckType.IsNegative, false, false, -5, false)]
    [TestCase(NumberCheckType.IsNegative, null, false, -5, null)]
    [TestCase(NumberCheckType.IsNegative, true, true, 5, true)]
    [TestCase(NumberCheckType.IsNegative, true, false, 5, false)]
    [TestCase(NumberCheckType.IsNegative, true, null, 5, null)]
    [TestCase(NumberCheckType.IsMaxValue, true, true, 5, true)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, 5, false)]
    [TestCase(NumberCheckType.IsMaxValue, true, null, 5, null)]
    [TestCase(NumberCheckType.IsMinValue, true, true, 5, true)]
    [TestCase(NumberCheckType.IsMinValue, true, false, 5, false)]
    [TestCase(NumberCheckType.IsMinValue, true, null, 5, null)]
    [TestCase(NumberCheckType.IsEven, true, false, 4, true)]
    [TestCase(NumberCheckType.IsEven, false, false, 4, false)]
    [TestCase(NumberCheckType.IsEven, null, false, 4, null)]
    [TestCase(NumberCheckType.IsEven, true, true, 5, true)]
    [TestCase(NumberCheckType.IsEven, true, false, 5, false)]
    [TestCase(NumberCheckType.IsEven, true, null, 5, null)]
    [TestCase(NumberCheckType.IsOdd, true, false, 5, true)]
    [TestCase(NumberCheckType.IsOdd, false, false, 5, false)]
    [TestCase(NumberCheckType.IsOdd, null, false, 5, null)]
    [TestCase(NumberCheckType.IsOdd, true, true, 4, true)]
    [TestCase(NumberCheckType.IsOdd, true, false, 4, false)]
    [TestCase(NumberCheckType.IsOdd, true, null, 4, null)]
    [TestCase(NumberCheckType.IsNaN, true, true, 5, true)]
    [TestCase(NumberCheckType.IsNaN, true, false, 5, false)]
    [TestCase(NumberCheckType.IsNaN, true, null, 5, null)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, true, 5, true)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, false, 5, false)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, null, 5, null)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, true, 5, true)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, false, 5, false)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, null, 5, null)]
    [TestCase(NumberCheckType.IsZero, true, true, 0, true)]
    [TestCase(NumberCheckType.IsZero, false, true, 0, false)]
    [TestCase(NumberCheckType.IsZero, null, true, 0, null)]
    [TestCase(NumberCheckType.IsZero, true, true, 5, true)]
    [TestCase(NumberCheckType.IsZero, true, false, 5, false)]
    [TestCase(NumberCheckType.IsZero, true, null, 5, null)]
    public void Convert_Called_Converts2(NumberCheckType checkType, bool? trueIs, bool? falseIs, int input, bool? expectation)
    {
        _target.CheckType = checkType;
        _target.TrueIs = trueIs;
        _target.FalseIs = falseIs;

        var bigInteger = new BigInteger(input);
        Convert(bigInteger, expectation);
    }

    [TestCase(NumberCheckType.IsNegative, true, false, null, true, -5, -5, -5)]
    [TestCase(NumberCheckType.IsNegative, false, false, null, false, -5, -5, -5)]
    [TestCase(NumberCheckType.IsNegative, null, false, null, null, -5, -5, -5)]
    [TestCase(NumberCheckType.IsNegative, true, true, null, true, 5, 5, 5)]
    [TestCase(NumberCheckType.IsNegative, true, false, null, false, 5, 5, 5)]
    [TestCase(NumberCheckType.IsNegative, true, null, null, null, 5, 5, 5)]
    [TestCase(NumberCheckType.IsNegative, true, false, null, null, -5, 4, 3)]
    [TestCase(NumberCheckType.IsNegative, true, false, true, true, -5, 4, 3)]
    [TestCase(NumberCheckType.IsNegative, true, false, false, false, -5, 4, 3)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, null, true, int.MaxValue, int.MaxValue, int.MaxValue)]
    [TestCase(NumberCheckType.IsMaxValue, false, false, null, false, int.MaxValue, int.MaxValue, int.MaxValue)]
    [TestCase(NumberCheckType.IsMaxValue, null, false, null, null, int.MaxValue, int.MaxValue, int.MaxValue)]
    [TestCase(NumberCheckType.IsMaxValue, true, true, null, true, 5, 5, 5)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, null, false, 5, 5, 5)]
    [TestCase(NumberCheckType.IsMaxValue, true, null, null, null, 5, 5, 5)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, null, null, int.MaxValue, 4, 3)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, true, true, int.MaxValue, 4, 3)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, false, false, int.MaxValue, 4, 3)]
    [TestCase(NumberCheckType.IsMinValue, true, false, null, true, int.MinValue, int.MinValue, int.MinValue)]
    [TestCase(NumberCheckType.IsMinValue, false, false, null, false, int.MinValue, int.MinValue, int.MinValue)]
    [TestCase(NumberCheckType.IsMinValue, null, false, null, null, int.MinValue, int.MinValue, int.MinValue)]
    [TestCase(NumberCheckType.IsMinValue, true, true, null, true, 5, 5, 5)]
    [TestCase(NumberCheckType.IsMinValue, true, false, null, false, 5, 5, 5)]
    [TestCase(NumberCheckType.IsMinValue, true, null, null, null, 5, 5, 5)]
    [TestCase(NumberCheckType.IsMinValue, true, false, null, null, int.MinValue, 4, 3)]
    [TestCase(NumberCheckType.IsMinValue, true, false, true, true, int.MinValue, 4, 3)]
    [TestCase(NumberCheckType.IsMinValue, true, false, false, false, int.MinValue, 4, 3)]
    [TestCase(NumberCheckType.IsEven, true, false, null, true, 4, 4, 4)]
    [TestCase(NumberCheckType.IsEven, false, false, null, false, 4, 4, 4)]
    [TestCase(NumberCheckType.IsEven, null, false, null, null, 4, 4, 4)]
    [TestCase(NumberCheckType.IsEven, true, true, null, true, 5, 5, 5)]
    [TestCase(NumberCheckType.IsEven, true, false, null, false, 5, 5, 5)]
    [TestCase(NumberCheckType.IsEven, true, null, null, null, 5, 5, 5)]
    [TestCase(NumberCheckType.IsEven, true, false, null, null, 4, 3, 1)]
    [TestCase(NumberCheckType.IsEven, true, false, true, true, 4, 3, 1)]
    [TestCase(NumberCheckType.IsEven, true, false, false, false, 4, 3, 1)]
    [TestCase(NumberCheckType.IsOdd, true, false, null, true, 5, 5, 5)]
    [TestCase(NumberCheckType.IsOdd, false, false, null, false, 5, 5, 5)]
    [TestCase(NumberCheckType.IsOdd, null, false, null, null, 5, 5, 5)]
    [TestCase(NumberCheckType.IsOdd, true, true, null, true, 4, 4, 4)]
    [TestCase(NumberCheckType.IsOdd, true, false, null, false, 4, 4, 4)]
    [TestCase(NumberCheckType.IsOdd, true, null, null, null, 4, 4, 4)]
    [TestCase(NumberCheckType.IsOdd, true, false, null, null, 5, 2, 0)]
    [TestCase(NumberCheckType.IsOdd, true, false, true, true, 5, 2, 0)]
    [TestCase(NumberCheckType.IsOdd, true, false, false, false, 5, 2, 0)]
    [TestCase(NumberCheckType.IsNaN, true, true, null, true, 5, 5, 5)]
    [TestCase(NumberCheckType.IsNaN, true, false, null, false, 5, 5, 5)]
    [TestCase(NumberCheckType.IsNaN, true, null, null, null, 5, 5, 5)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, true, null, true, 5, 5, 5)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, false, null, false, 5, 5, 5)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, null, null, null, 5, 5, 5)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, true, null, true, 5, 5, 5)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, false, null, false, 5, 5, 5)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, null, null, null, 5, 5, 5)]
    [TestCase(NumberCheckType.IsZero, true, true, null, true, 0, 0, 0)]
    [TestCase(NumberCheckType.IsZero, false, true, null, false, 0, 0, 0)]
    [TestCase(NumberCheckType.IsZero, null, true, null, null, 0, 0, 0)]
    [TestCase(NumberCheckType.IsZero, true, true, null, true, 5, 5, 5)]
    [TestCase(NumberCheckType.IsZero, true, false, null, false, 5, 5, 5)]
    [TestCase(NumberCheckType.IsZero, true, null, null, null, 5, 5, 5)]
    [TestCase(NumberCheckType.IsZero, true, false, null, null, 0, 4, 3)]
    [TestCase(NumberCheckType.IsZero, true, false, true, true, 0, 4, 3)]
    [TestCase(NumberCheckType.IsZero, true, false, false, false, 0, 4, 3)]
    [TestCase(NumberCheckType.IsNegative, true, false, null, true, (short)-5, (short)-5, (short)-5)]
    [TestCase(NumberCheckType.IsNegative, false, false, null, false, (short)-5, (short)-5, (short)-5)]
    [TestCase(NumberCheckType.IsNegative, null, false, null, null, (short)-5, (short)-5, (short)-5)]
    [TestCase(NumberCheckType.IsNegative, true, true, null, true, (short)5, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsNegative, true, false, null, false, (short)5, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsNegative, true, null, null, null, (short)5, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsNegative, true, false, null, null, (short)-5, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsNegative, true, false, true, true, (short)-5, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsNegative, true, false, false, false, (short)-5, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, null, true, short.MaxValue, short.MaxValue, short.MaxValue)]
    [TestCase(NumberCheckType.IsMaxValue, false, false, null, false, short.MaxValue, short.MaxValue, short.MaxValue)]
    [TestCase(NumberCheckType.IsMaxValue, null, false, null, null, short.MaxValue, short.MaxValue, short.MaxValue)]
    [TestCase(NumberCheckType.IsMaxValue, true, true, null, true, (short)5, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, null, false, (short)5, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsMaxValue, true, null, null, null, (short)5, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, null, null, short.MaxValue, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, true, true, short.MaxValue, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, false, false, short.MaxValue, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsMinValue, true, false, null, true, short.MinValue, short.MinValue, short.MinValue)]
    [TestCase(NumberCheckType.IsMinValue, false, false, null, false, short.MinValue, short.MinValue, short.MinValue)]
    [TestCase(NumberCheckType.IsMinValue, null, false, null, null, short.MinValue, short.MinValue, short.MinValue)]
    [TestCase(NumberCheckType.IsMinValue, true, true, null, true, (short)5, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsMinValue, true, false, null, false, (short)5, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsMinValue, true, null, null, null, (short)5, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsMinValue, true, false, null, null, short.MinValue, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsMinValue, true, false, true, true, short.MinValue, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsMinValue, true, false, false, false, short.MinValue, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsEven, true, false, null, true, (short)4, (short)4, (short)4)]
    [TestCase(NumberCheckType.IsEven, false, false, null, false, (short)4, (short)4, (short)4)]
    [TestCase(NumberCheckType.IsEven, null, false, null, null, (short)4, (short)4, (short)4)]
    [TestCase(NumberCheckType.IsEven, true, true, null, true, (short)5, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsEven, true, false, null, false, (short)5, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsEven, true, null, null, null, (short)5, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsEven, true, false, null, null, (short)4, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsEven, true, false, true, true, (short)4, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsEven, true, false, false, false, (short)4, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsOdd, true, false, null, true, (short)5, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsOdd, false, false, null, false, (short)5, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsOdd, null, false, null, null, (short)5, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsOdd, true, true, null, true, (short)4, (short)4, (short)4)]
    [TestCase(NumberCheckType.IsOdd, true, false, null, false, (short)4, (short)4, (short)4)]
    [TestCase(NumberCheckType.IsOdd, true, null, null, null, (short)4, (short)4, (short)4)]
    [TestCase(NumberCheckType.IsOdd, true, false, null, null, (short)5, (short)4, (short)4)]
    [TestCase(NumberCheckType.IsOdd, true, false, true, true, (short)5, (short)4, (short)4)]
    [TestCase(NumberCheckType.IsOdd, true, false, false, false, (short)5, (short)4, (short)4)]
    [TestCase(NumberCheckType.IsNaN, true, true, null, true, (short)5, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsNaN, true, false, null, false, (short)5, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsNaN, true, null, null, null, (short)5, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, true, null, true, (short)5, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, false, null, false, (short)5, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, null, null, null, (short)5, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, true, null, true, (short)5, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, false, null, false, (short)5, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, null, null, null, (short)5, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsZero, true, true, null, true, (short)0, (short)0, (short)0)]
    [TestCase(NumberCheckType.IsZero, false, true, null, false, (short)0, (short)0, (short)0)]
    [TestCase(NumberCheckType.IsZero, null, true, null, null, (short)0, (short)0, (short)0)]
    [TestCase(NumberCheckType.IsZero, true, true, null, true, (short)5, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsZero, true, false, null, false, (short)5, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsZero, true, null, null, null, (short)5, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsZero, true, false, null, null, (short)0, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsZero, true, false, true, true, (short)0, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsZero, true, false, false, false, (short)0, (short)5, (short)5)]
    [TestCase(NumberCheckType.IsNegative, true, false, null, true, -5d, -5d, -5d)]
    [TestCase(NumberCheckType.IsNegative, false, false, null, false, -5d, -5d, -5d)]
    [TestCase(NumberCheckType.IsNegative, null, false, null, null, -5d, -5d, -5d)]
    [TestCase(NumberCheckType.IsNegative, true, true, null, true, 5d, 5d, 5d)]
    [TestCase(NumberCheckType.IsNegative, true, false, null, false, 5d, 5d, 5d)]
    [TestCase(NumberCheckType.IsNegative, true, null, null, null, 5d, 5d, 5d)]
    [TestCase(NumberCheckType.IsNegative, true, false, null, null, -5d, 5d, 5d)]
    [TestCase(NumberCheckType.IsNegative, true, false, true, true, -5d, 5d, 5d)]
    [TestCase(NumberCheckType.IsNegative, true, false, false, false, -5d, 5d, 5d)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, null, true, double.MaxValue, double.MaxValue, double.MaxValue)]
    [TestCase(NumberCheckType.IsMaxValue, false, false, null, false, double.MaxValue, double.MaxValue, double.MaxValue)]
    [TestCase(NumberCheckType.IsMaxValue, null, false, null, null, double.MaxValue, double.MaxValue, double.MaxValue)]
    [TestCase(NumberCheckType.IsMaxValue, true, true, null, true, 5d, 5d, 5d)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, null, false, 5d, 5d, 5d)]
    [TestCase(NumberCheckType.IsMaxValue, true, null, null, null, 5d, 5d, 5d)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, null, null, double.MaxValue, 5d, 5d)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, true, true, double.MaxValue, 5d, 5d)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, false, false, double.MaxValue, 5d, 5d)]
    [TestCase(NumberCheckType.IsMinValue, true, false, null, true, double.MinValue, double.MinValue, double.MinValue)]
    [TestCase(NumberCheckType.IsMinValue, false, false, null, false, double.MinValue, double.MinValue, double.MinValue)]
    [TestCase(NumberCheckType.IsMinValue, null, false, null, null, double.MinValue, double.MinValue, double.MinValue)]
    [TestCase(NumberCheckType.IsMinValue, true, true, null, true, 5d, 5d, 5d)]
    [TestCase(NumberCheckType.IsMinValue, true, false, null, false, 5d, 5d, 5d)]
    [TestCase(NumberCheckType.IsMinValue, true, null, null, null, 5d, 5d, 5d)]
    [TestCase(NumberCheckType.IsMinValue, true, false, null, null, double.MinValue, 5d, 5d)]
    [TestCase(NumberCheckType.IsMinValue, true, false, true, true, double.MinValue, 5d, 5d)]
    [TestCase(NumberCheckType.IsMinValue, true, false, false, false, double.MinValue, 5d, 5d)]
    [TestCase(NumberCheckType.IsEven, true, false, null, true, 4d, 4d, 4d)]
    [TestCase(NumberCheckType.IsEven, false, false, null, false, 4d, 4d, 4d)]
    [TestCase(NumberCheckType.IsEven, null, false, null, null, 4d, 4d, 4d)]
    [TestCase(NumberCheckType.IsEven, true, true, null, true, 5d, 5d, 5d)]
    [TestCase(NumberCheckType.IsEven, true, false, null, false, 5d, 5d, 5d)]
    [TestCase(NumberCheckType.IsEven, true, null, null, null, 5d, 5d, 5d)]
    [TestCase(NumberCheckType.IsEven, true, false, null, null, 4d, 5d, 5d)]
    [TestCase(NumberCheckType.IsEven, true, false, true, true, 4d, 5d, 5d)]
    [TestCase(NumberCheckType.IsEven, true, false, false, false, 4d, 5d, 5d)]
    [TestCase(NumberCheckType.IsOdd, true, false, null, true, 5d, 5d, 5d)]
    [TestCase(NumberCheckType.IsOdd, false, false, null, false, 5d, 5d, 5d)]
    [TestCase(NumberCheckType.IsOdd, null, false, null, null, 5d, 5d, 5d)]
    [TestCase(NumberCheckType.IsOdd, true, true, null, true, 4d, 4d, 4d)]
    [TestCase(NumberCheckType.IsOdd, true, false, null, false, 4d, 4d, 4d)]
    [TestCase(NumberCheckType.IsOdd, true, null, null, null, 4d, 4d, 4d)]
    [TestCase(NumberCheckType.IsOdd, true, false, null, null, 5d, 4d, 4d)]
    [TestCase(NumberCheckType.IsOdd, true, false, true, true, 5d, 4d, 4d)]
    [TestCase(NumberCheckType.IsOdd, true, false, false, false, 5d, 4d, 4d)]
    [TestCase(NumberCheckType.IsNaN, true, false, null, true, double.NaN, double.NaN, double.NaN)]
    [TestCase(NumberCheckType.IsNaN, false, false, null, false, double.NaN, double.NaN, double.NaN)]
    [TestCase(NumberCheckType.IsNaN, null, false, null, null, double.NaN, double.NaN, double.NaN)]
    [TestCase(NumberCheckType.IsNaN, true, true, null, true, 5d, 5d, 5d)]
    [TestCase(NumberCheckType.IsNaN, true, false, null, false, 5d, 5d, 5d)]
    [TestCase(NumberCheckType.IsNaN, true, null, null, null, 5d, 5d, 5d)]
    [TestCase(NumberCheckType.IsNaN, true, false, null, null, double.NaN, 5d, 5d)]
    [TestCase(NumberCheckType.IsNaN, true, false, true, true, double.NaN, 5d, 5d)]
    [TestCase(NumberCheckType.IsNaN, true, false, false, false, double.NaN, 5d, 5d)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, false, null, true, double.NegativeInfinity, double.NegativeInfinity, double.NegativeInfinity)]
    [TestCase(NumberCheckType.IsNegativeInfinity, false, false, null, false, double.NegativeInfinity, double.NegativeInfinity, double.NegativeInfinity)]
    [TestCase(NumberCheckType.IsNegativeInfinity, null, false, null, null, double.NegativeInfinity, double.NegativeInfinity, double.NegativeInfinity)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, true, null, true, 5d, 5d, 5d)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, false, null, false, 5d, 5d, 5d)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, null, null, null, 5d, 5d, 5d)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, false, null, null, double.NegativeInfinity, 5d, 5d)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, false, true, true, double.NegativeInfinity, 5d, 5d)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, false, false, false, double.NegativeInfinity, 5d, 5d)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, false, null, true, double.PositiveInfinity, double.PositiveInfinity, double.PositiveInfinity)]
    [TestCase(NumberCheckType.IsPositiveInfinity, false, false, null, false, double.PositiveInfinity, double.PositiveInfinity, double.PositiveInfinity)]
    [TestCase(NumberCheckType.IsPositiveInfinity, null, false, null, null, double.PositiveInfinity, double.PositiveInfinity, double.PositiveInfinity)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, true, null, true, 5d, 5d, 5d)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, false, null, false, 5d, 5d, 5d)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, null, null, null, 5d, 5d, 5d)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, false, null, null, double.PositiveInfinity, 5d, 5d)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, false, true, true, double.PositiveInfinity, 5d, 5d)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, false, false, false, double.PositiveInfinity, 5d, 5d)]
    [TestCase(NumberCheckType.IsZero, true, true, null, true, 0d, 0d, 0d)]
    [TestCase(NumberCheckType.IsZero, false, true, null, false, 0d, 0d, 0d)]
    [TestCase(NumberCheckType.IsZero, null, true, null, null, 0d, 0d, 0d)]
    [TestCase(NumberCheckType.IsZero, true, true, null, true, 5d, 5d, 5d)]
    [TestCase(NumberCheckType.IsZero, true, false, null, false, 5d, 5d, 5d)]
    [TestCase(NumberCheckType.IsZero, true, null, null, null, 5d, 5d, 5d)]
    [TestCase(NumberCheckType.IsZero, true, false, null, null, 0d, 5d, 5d)]
    [TestCase(NumberCheckType.IsZero, true, false, true, true, 0d, 5d, 5d)]
    [TestCase(NumberCheckType.IsZero, true, false, false, false, 0d, 5d, 5d)]
    [TestCase(NumberCheckType.IsNegative, true, false, null, true, -5f, -5f, -5f)]
    [TestCase(NumberCheckType.IsNegative, false, false, null, false, -5f, -5f, -5f)]
    [TestCase(NumberCheckType.IsNegative, null, false, null, null, -5f, -5f, -5f)]
    [TestCase(NumberCheckType.IsNegative, true, true, null, true, 5f, 5f, 5f)]
    [TestCase(NumberCheckType.IsNegative, true, false, null, false, 5f, 5f, 5f)]
    [TestCase(NumberCheckType.IsNegative, true, null, null, null, 5f, 5f, 5f)]
    [TestCase(NumberCheckType.IsNegative, true, false, null, null, -5f, 5f, 5f)]
    [TestCase(NumberCheckType.IsNegative, true, false, true, true, -5f, 5f, 5f)]
    [TestCase(NumberCheckType.IsNegative, true, false, false, false, -5f, 5f, 5f)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, null, true, float.MaxValue, float.MaxValue, float.MaxValue)]
    [TestCase(NumberCheckType.IsMaxValue, false, false, null, false, float.MaxValue, float.MaxValue, float.MaxValue)]
    [TestCase(NumberCheckType.IsMaxValue, null, false, null, null, float.MaxValue, float.MaxValue, float.MaxValue)]
    [TestCase(NumberCheckType.IsMaxValue, true, true, null, true, 5f, 5f, 5f)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, null, false, 5f, 5f, 5f)]
    [TestCase(NumberCheckType.IsMaxValue, true, null, null, null, 5f, 5f, 5f)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, null, null, float.MaxValue, 5f, 5f)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, true, true, float.MaxValue, 5f, 5f)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, false, false, float.MaxValue, 5f, 5f)]
    [TestCase(NumberCheckType.IsMinValue, true, false, null, true, float.MinValue, float.MinValue, float.MinValue)]
    [TestCase(NumberCheckType.IsMinValue, false, false, null, false, float.MinValue, float.MinValue, float.MinValue)]
    [TestCase(NumberCheckType.IsMinValue, null, false, null, null, float.MinValue, float.MinValue, float.MinValue)]
    [TestCase(NumberCheckType.IsMinValue, true, true, null, true, 5f, 5f, 5f)]
    [TestCase(NumberCheckType.IsMinValue, true, false, null, false, 5f, 5f, 5f)]
    [TestCase(NumberCheckType.IsMinValue, true, null, null, null, 5f, 5f, 5f)]
    [TestCase(NumberCheckType.IsMinValue, true, false, null, null, float.MinValue, 5f, 5f)]
    [TestCase(NumberCheckType.IsMinValue, true, false, true, true, float.MinValue, 5f, 5f)]
    [TestCase(NumberCheckType.IsMinValue, true, false, false, false, float.MinValue, 5f, 5f)]
    [TestCase(NumberCheckType.IsEven, true, false, null, true, 4f, 4f, 4f)]
    [TestCase(NumberCheckType.IsEven, false, false, null, false, 4f, 4f, 4f)]
    [TestCase(NumberCheckType.IsEven, null, false, null, null, 4f, 4f, 4f)]
    [TestCase(NumberCheckType.IsEven, true, true, null, true, 5f, 5f, 5f)]
    [TestCase(NumberCheckType.IsEven, true, false, null, false, 5f, 5f, 5f)]
    [TestCase(NumberCheckType.IsEven, true, null, null, null, 5f, 5f, 5f)]
    [TestCase(NumberCheckType.IsEven, true, false, null, null, 4f, 5f, 5f)]
    [TestCase(NumberCheckType.IsEven, true, false, true, true, 4f, 5f, 5f)]
    [TestCase(NumberCheckType.IsEven, true, false, false, false, 4f, 5f, 5f)]
    [TestCase(NumberCheckType.IsOdd, true, false, null, true, 5f, 5f, 5f)]
    [TestCase(NumberCheckType.IsOdd, false, false, null, false, 5f, 5f, 5f)]
    [TestCase(NumberCheckType.IsOdd, null, false, null, null, 5f, 5f, 5f)]
    [TestCase(NumberCheckType.IsOdd, true, true, null, true, 4f, 4f, 4f)]
    [TestCase(NumberCheckType.IsOdd, true, false, null, false, 4f, 4f, 4f)]
    [TestCase(NumberCheckType.IsOdd, true, null, null, null, 4f, 4f, 4f)]
    [TestCase(NumberCheckType.IsOdd, true, false, null, null, 5f, 4f, 4f)]
    [TestCase(NumberCheckType.IsOdd, true, false, true, true, 5f, 4f, 4f)]
    [TestCase(NumberCheckType.IsOdd, true, false, false, false, 5f, 4f, 4f)]
    [TestCase(NumberCheckType.IsNaN, true, false, null, true, float.NaN, float.NaN, float.NaN)]
    [TestCase(NumberCheckType.IsNaN, false, false, null, false, float.NaN, float.NaN, float.NaN)]
    [TestCase(NumberCheckType.IsNaN, null, false, null, null, float.NaN, float.NaN, float.NaN)]
    [TestCase(NumberCheckType.IsNaN, true, true, null, true, 5f, 5f, 5f)]
    [TestCase(NumberCheckType.IsNaN, true, false, null, false, 5f, 5f, 5f)]
    [TestCase(NumberCheckType.IsNaN, true, null, null, null, 5f, 5f, 5f)]
    [TestCase(NumberCheckType.IsNaN, true, false, null, null, float.NaN, 5f, 5f)]
    [TestCase(NumberCheckType.IsNaN, true, false, true, true, float.NaN, 5f, 5f)]
    [TestCase(NumberCheckType.IsNaN, true, false, false, false, float.NaN, 5f, 5f)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, false, null, true, float.NegativeInfinity, float.NegativeInfinity, float.NegativeInfinity)]
    [TestCase(NumberCheckType.IsNegativeInfinity, false, false, null, false, float.NegativeInfinity, float.NegativeInfinity, float.NegativeInfinity)]
    [TestCase(NumberCheckType.IsNegativeInfinity, null, false, null, null, float.NegativeInfinity, float.NegativeInfinity, float.NegativeInfinity)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, true, null, true, 5f, 5f, 5f)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, false, null, false, 5f, 5f, 5f)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, null, null, null, 5f, 5f, 5f)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, false, null, null, float.NegativeInfinity, 5f, 5f)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, false, true, true, float.NegativeInfinity, 5f, 5f)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, false, false, false, float.NegativeInfinity, 5f, 5f)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, false, null, true, float.PositiveInfinity, float.PositiveInfinity, float.PositiveInfinity)]
    [TestCase(NumberCheckType.IsPositiveInfinity, false, false, null, false, float.PositiveInfinity, float.PositiveInfinity, float.PositiveInfinity)]
    [TestCase(NumberCheckType.IsPositiveInfinity, null, false, null, null, float.PositiveInfinity, float.PositiveInfinity, float.PositiveInfinity)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, true, null, true, 5f, 5f, 5f)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, false, null, false, 5f, 5f, 5f)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, null, null, null, 5f, 5f, 5f)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, false, null, null, float.PositiveInfinity, 5f, 5f)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, false, true, true, float.PositiveInfinity, 5f, 5f)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, false, false, false, float.PositiveInfinity, 5f, 5f)]
    [TestCase(NumberCheckType.IsZero, true, true, null, true, 0f, 0f, 0f)]
    [TestCase(NumberCheckType.IsZero, false, true, null, false, 0f, 0f, 0f)]
    [TestCase(NumberCheckType.IsZero, null, true, null, null, 0f, 0f, 0f)]
    [TestCase(NumberCheckType.IsZero, true, true, null, true, 5f, 5f, 5f)]
    [TestCase(NumberCheckType.IsZero, true, false, null, false, 5f, 5f, 5f)]
    [TestCase(NumberCheckType.IsZero, true, null, null, null, 5f, 5f, 5f)]
    [TestCase(NumberCheckType.IsZero, true, false, null, null, 0f, 5f, 5f)]
    [TestCase(NumberCheckType.IsZero, true, false, true, true, 0f, 5f, 5f)]
    [TestCase(NumberCheckType.IsZero, true, false, false, false, 0f, 5f, 5f)]
    [TestCase(NumberCheckType.IsNegative, true, false, null, true, (sbyte)-5, (sbyte)-5, (sbyte)-5)]
    [TestCase(NumberCheckType.IsNegative, false, false, null, false, (sbyte)-5, (sbyte)-5, (sbyte)-5)]
    [TestCase(NumberCheckType.IsNegative, null, false, null, null, (sbyte)-5, (sbyte)-5, (sbyte)-5)]
    [TestCase(NumberCheckType.IsNegative, true, true, null, true, (sbyte)5, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsNegative, true, false, null, false, (sbyte)5, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsNegative, true, null, null, null, (sbyte)5, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsNegative, true, false, null, null, (sbyte)-5, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsNegative, true, false, true, true, (sbyte)-5, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsNegative, true, false, false, false, (sbyte)-5, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, null, true, sbyte.MaxValue, sbyte.MaxValue, sbyte.MaxValue)]
    [TestCase(NumberCheckType.IsMaxValue, false, false, null, false, sbyte.MaxValue, sbyte.MaxValue, sbyte.MaxValue)]
    [TestCase(NumberCheckType.IsMaxValue, null, false, null, null, sbyte.MaxValue, sbyte.MaxValue, sbyte.MaxValue)]
    [TestCase(NumberCheckType.IsMaxValue, true, true, null, true, (sbyte)5, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, null, false, (sbyte)5, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsMaxValue, true, null, null, null, (sbyte)5, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, null, null, sbyte.MaxValue, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, true, true, sbyte.MaxValue, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, false, false, sbyte.MaxValue, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsMinValue, true, false, null, true, sbyte.MinValue, sbyte.MinValue, sbyte.MinValue)]
    [TestCase(NumberCheckType.IsMinValue, false, false, null, false, sbyte.MinValue, sbyte.MinValue, sbyte.MinValue)]
    [TestCase(NumberCheckType.IsMinValue, null, false, null, null, sbyte.MinValue, sbyte.MinValue, sbyte.MinValue)]
    [TestCase(NumberCheckType.IsMinValue, true, true, null, true, (sbyte)5, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsMinValue, true, false, null, false, (sbyte)5, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsMinValue, true, null, null, null, (sbyte)5, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsMinValue, true, false, null, null, sbyte.MinValue, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsMinValue, true, false, true, true, sbyte.MinValue, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsMinValue, true, false, false, false, sbyte.MinValue, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsEven, true, false, null, true, (sbyte)4, (sbyte)4, (sbyte)4)]
    [TestCase(NumberCheckType.IsEven, false, false, null, false, (sbyte)4, (sbyte)4, (sbyte)4)]
    [TestCase(NumberCheckType.IsEven, null, false, null, null, (sbyte)4, (sbyte)4, (sbyte)4)]
    [TestCase(NumberCheckType.IsEven, true, true, null, true, (sbyte)5, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsEven, true, false, null, false, (sbyte)5, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsEven, true, null, null, null, (sbyte)5, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsEven, true, false, null, null, (sbyte)4, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsEven, true, false, true, true, (sbyte)4, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsEven, true, false, false, false, (sbyte)4, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsOdd, true, false, null, true, (sbyte)5, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsOdd, false, false, null, false, (sbyte)5, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsOdd, null, false, null, null, (sbyte)5, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsOdd, true, true, null, true, (sbyte)4, (sbyte)4, (sbyte)4)]
    [TestCase(NumberCheckType.IsOdd, true, false, null, false, (sbyte)4, (sbyte)4, (sbyte)4)]
    [TestCase(NumberCheckType.IsOdd, true, null, null, null, (sbyte)4, (sbyte)4, (sbyte)4)]
    [TestCase(NumberCheckType.IsOdd, true, false, null, null, (sbyte)5, (sbyte)4, (sbyte)4)]
    [TestCase(NumberCheckType.IsOdd, true, false, true, true, (sbyte)5, (sbyte)4, (sbyte)4)]
    [TestCase(NumberCheckType.IsOdd, true, false, false, false, (sbyte)5, (sbyte)4, (sbyte)4)]
    [TestCase(NumberCheckType.IsNaN, true, true, null, true, (sbyte)5, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsNaN, true, false, null, false, (sbyte)5, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsNaN, true, null, null, null, (sbyte)5, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, true, null, true, (sbyte)5, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, false, null, false, (sbyte)5, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, null, null, null, (sbyte)5, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, true, null, true, (sbyte)5, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, false, null, false, (sbyte)5, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, null, null, null, (sbyte)5, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsZero, true, true, null, true, (sbyte)0, (sbyte)0, (sbyte)0)]
    [TestCase(NumberCheckType.IsZero, false, true, null, false, (sbyte)0, (sbyte)0, (sbyte)0)]
    [TestCase(NumberCheckType.IsZero, null, true, null, null, (sbyte)0, (sbyte)0, (sbyte)0)]
    [TestCase(NumberCheckType.IsZero, true, true, null, true, (sbyte)5, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsZero, true, false, null, false, (sbyte)5, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsZero, true, null, null, null, (sbyte)5, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsZero, true, false, null, null, (sbyte)0, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsZero, true, false, true, true, (sbyte)0, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsZero, true, false, false, false, (sbyte)0, (sbyte)5, (sbyte)5)]
    [TestCase(NumberCheckType.IsNegative, true, false, null, true, (long)-5, (long)-5, (long)-5)]
    [TestCase(NumberCheckType.IsNegative, false, false, null, false, (long)-5, (long)-5, (long)-5)]
    [TestCase(NumberCheckType.IsNegative, null, false, null, null, (long)-5, (long)-5, (long)-5)]
    [TestCase(NumberCheckType.IsNegative, true, true, null, true, (long)5, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsNegative, true, false, null, false, (long)5, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsNegative, true, null, null, null, (long)5, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsNegative, true, false, null, null, (long)-5, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsNegative, true, false, true, true, (long)-5, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsNegative, true, false, false, false, (long)-5, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, null, true, long.MaxValue, long.MaxValue, long.MaxValue)]
    [TestCase(NumberCheckType.IsMaxValue, false, false, null, false, long.MaxValue, long.MaxValue, long.MaxValue)]
    [TestCase(NumberCheckType.IsMaxValue, null, false, null, null, long.MaxValue, long.MaxValue, long.MaxValue)]
    [TestCase(NumberCheckType.IsMaxValue, true, true, null, true, (long)5, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, null, false, (long)5, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsMaxValue, true, null, null, null, (long)5, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, null, null, long.MaxValue, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, true, true, long.MaxValue, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, false, false, long.MaxValue, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsMinValue, true, false, null, true, long.MinValue, long.MinValue, long.MinValue)]
    [TestCase(NumberCheckType.IsMinValue, false, false, null, false, long.MinValue, long.MinValue, long.MinValue)]
    [TestCase(NumberCheckType.IsMinValue, null, false, null, null, long.MinValue, long.MinValue, long.MinValue)]
    [TestCase(NumberCheckType.IsMinValue, true, true, null, true, (long)5, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsMinValue, true, false, null, false, (long)5, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsMinValue, true, null, null, null, (long)5, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsMinValue, true, false, null, null, long.MinValue, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsMinValue, true, false, true, true, long.MinValue, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsMinValue, true, false, false, false, long.MinValue, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsEven, true, false, null, true, (long)4, (long)4, (long)4)]
    [TestCase(NumberCheckType.IsEven, false, false, null, false, (long)4, (long)4, (long)4)]
    [TestCase(NumberCheckType.IsEven, null, false, null, null, (long)4, (long)4, (long)4)]
    [TestCase(NumberCheckType.IsEven, true, true, null, true, (long)5, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsEven, true, false, null, false, (long)5, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsEven, true, null, null, null, (long)5, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsEven, true, false, null, null, (long)4, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsEven, true, false, true, true, (long)4, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsEven, true, false, false, false, (long)4, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsOdd, true, false, null, true, (long)5, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsOdd, false, false, null, false, (long)5, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsOdd, null, false, null, null, (long)5, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsOdd, true, true, null, true, (long)4, (long)4, (long)4)]
    [TestCase(NumberCheckType.IsOdd, true, false, null, false, (long)4, (long)4, (long)4)]
    [TestCase(NumberCheckType.IsOdd, true, null, null, null, (long)4, (long)4, (long)4)]
    [TestCase(NumberCheckType.IsOdd, true, false, null, null, (long)5, (long)4, (long)4)]
    [TestCase(NumberCheckType.IsOdd, true, false, true, true, (long)5, (long)4, (long)4)]
    [TestCase(NumberCheckType.IsOdd, true, false, false, false, (long)5, (long)4, (long)4)]
    [TestCase(NumberCheckType.IsNaN, true, true, null, true, (long)5, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsNaN, true, false, null, false, (long)5, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsNaN, true, null, null, null, (long)5, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, true, null, true, (long)5, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, false, null, false, (long)5, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, null, null, null, (long)5, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, true, null, true, (long)5, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, false, null, false, (long)5, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, null, null, null, (long)5, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsZero, true, true, null, true, (long)0, (long)0, (long)0)]
    [TestCase(NumberCheckType.IsZero, false, true, null, false, (long)0, (long)0, (long)0)]
    [TestCase(NumberCheckType.IsZero, null, true, null, null, (long)0, (long)0, (long)0)]
    [TestCase(NumberCheckType.IsZero, true, true, null, true, (long)5, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsZero, true, false, null, false, (long)5, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsZero, true, null, null, null, (long)5, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsZero, true, false, null, null, (long)0, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsZero, true, false, true, true, (long)0, (long)5, (long)5)]
    [TestCase(NumberCheckType.IsZero, true, false, false, false, (long)0, (long)5, (long)5)]
    public void MultiConvert_Called_Converts(NumberCheckType checkType, bool? trueIs, bool? falseIs, bool? mixedIs, bool? expectation, params object[] input)
    {
        _target.CheckType = checkType;
        _target.TrueIs = trueIs;
        _target.FalseIs = falseIs;
        _target.MixedIs = mixedIs;

        MultiConvert(input, expectation);
    }

    [TestCase(NumberCheckType.IsNegative, true, false, null, true, -5, -4, -3)]
    [TestCase(NumberCheckType.IsNegative, false, false, null, false, -5, -4, -3)]
    [TestCase(NumberCheckType.IsNegative, null, false, null, null, -5, -4, -3)]
    [TestCase(NumberCheckType.IsNegative, true, true, null, true, 5, 4, 3)]
    [TestCase(NumberCheckType.IsNegative, true, false, null, false, 5, 4, 3)]
    [TestCase(NumberCheckType.IsNegative, true, null, null, null, 5, 4, 3)]
    [TestCase(NumberCheckType.IsNegative, true, false, null, null, -5, -4, 3)]
    [TestCase(NumberCheckType.IsNegative, true, false, true, true, -5, -4, 3)]
    [TestCase(NumberCheckType.IsNegative, true, false, false, false, -5, -4, 3)]
    [TestCase(NumberCheckType.IsMaxValue, true, true, null, true, 5, 4, 3)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, null, false, 5, 4, 3)]
    [TestCase(NumberCheckType.IsMaxValue, true, null, null, null, 5, 4, 3)]
    [TestCase(NumberCheckType.IsMinValue, true, true, null, true, 5, 4, 3)]
    [TestCase(NumberCheckType.IsMinValue, true, false, null, false, 5, 4, 3)]
    [TestCase(NumberCheckType.IsMinValue, true, null, null, null, 5, 4, 3)]
    [TestCase(NumberCheckType.IsEven, true, false, null, true, 4, 2, 0)]
    [TestCase(NumberCheckType.IsEven, false, false, null, false, 4, 2, 0)]
    [TestCase(NumberCheckType.IsEven, null, false, null, null, 4, 2, 0)]
    [TestCase(NumberCheckType.IsEven, true, true, null, true, 5, 3, 1)]
    [TestCase(NumberCheckType.IsEven, true, false, null, false, 5, 3, 1)]
    [TestCase(NumberCheckType.IsEven, true, null, null, null, 5, 3, 1)]
    [TestCase(NumberCheckType.IsEven, true, false, null, null, 4, 2, 1)]
    [TestCase(NumberCheckType.IsEven, true, false, true, true, 4, 2, 1)]
    [TestCase(NumberCheckType.IsEven, true, false, false, false, 4, 2, 1)]
    [TestCase(NumberCheckType.IsOdd, true, false, null, true, 5, 3, 1)]
    [TestCase(NumberCheckType.IsOdd, false, false, null, false, 5, 3, 1)]
    [TestCase(NumberCheckType.IsOdd, null, false, null, null, 5, 3, 1)]
    [TestCase(NumberCheckType.IsOdd, true, true, null, true, 4, 2, 0)]
    [TestCase(NumberCheckType.IsOdd, true, false, null, false, 4, 2, 0)]
    [TestCase(NumberCheckType.IsOdd, true, null, null, null, 4, 2, 0)]
    [TestCase(NumberCheckType.IsOdd, true, false, null, null, 5, 3, 0)]
    [TestCase(NumberCheckType.IsOdd, true, false, true, true, 5, 3, 0)]
    [TestCase(NumberCheckType.IsOdd, true, false, false, false, 5, 3, 0)]
    [TestCase(NumberCheckType.IsNaN, true, true, null, true, 5, 4, 3)]
    [TestCase(NumberCheckType.IsNaN, true, false, null, false, 5, 4, 3)]
    [TestCase(NumberCheckType.IsNaN, true, null, null, null, 5, 4, 3)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, true, null, true, 5, 4, 3)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, false, null, false, 5, 4, 3)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, null, null, null, 5, 4, 3)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, true, null, true, 5, 4, 3)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, false, null, false, 5, 4, 3)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, null, null, null, 5, 4, 3)]
    [TestCase(NumberCheckType.IsZero, true, true, null, true, 0, 0, 0)]
    [TestCase(NumberCheckType.IsZero, false, true, null, false, 0, 0, 0)]
    [TestCase(NumberCheckType.IsZero, null, true, null, null, 0, 0, 0)]
    [TestCase(NumberCheckType.IsZero, true, true, null, true, 5, 4, 3)]
    [TestCase(NumberCheckType.IsZero, true, false, null, false, 5, 4, 3)]
    [TestCase(NumberCheckType.IsZero, true, null, null, null, 5, 4, 3)]
    [TestCase(NumberCheckType.IsZero, true, false, null, null, 0, 0, 3)]
    [TestCase(NumberCheckType.IsZero, true, false, true, true, 0, 0, 3)]
    [TestCase(NumberCheckType.IsZero, true, false, false, false, 0, 0, 3)]
    public void MultiConvert_Called_Converts(NumberCheckType checkType, bool? trueIs, bool? falseIs, bool? mixedIs, bool? expectation, decimal inputOne, decimal inputTwo, decimal inputThree)
    {
        _target.CheckType = checkType;
        _target.TrueIs = trueIs;
        _target.FalseIs = falseIs;
        _target.MixedIs = mixedIs;

        MultiConvert([inputOne, inputTwo, inputThree], expectation);
    }

    [TestCase(NumberCheckType.IsMaxValue, true, false, null, true, true)]
    [TestCase(NumberCheckType.IsMaxValue, false, false, null, false, true)]
    [TestCase(NumberCheckType.IsMaxValue, null, false, null, null, true)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, null, false, false)]
    [TestCase(NumberCheckType.IsMaxValue, true, true, null, true, false)]
    [TestCase(NumberCheckType.IsMaxValue, true, null, null, null, false)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, null, null, null)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, true, true, null)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, false, false, null)]
    public void MultiConvert_WithDecimalMaxValue_Converts(NumberCheckType checkType, bool? trueIs, bool? falseIs, bool? mixedIs, bool? expectation, bool? input)
    {
        _target.CheckType = checkType;
        _target.TrueIs = trueIs;
        _target.FalseIs = falseIs;
        _target.MixedIs = mixedIs;

        var numbers = input switch
        {
            true => [decimal.MaxValue, decimal.MaxValue, decimal.MaxValue],
            false => [5, 4, 3],
            _ => new[] { 5, decimal.MaxValue, decimal.MaxValue }
        };

        MultiConvert(numbers.Cast<object>().ToArray(), expectation);
    }

    [TestCase(NumberCheckType.IsMinValue, true, false, null, true, true)]
    [TestCase(NumberCheckType.IsMinValue, false, false, null, false, true)]
    [TestCase(NumberCheckType.IsMinValue, null, false, null, null, true)]
    [TestCase(NumberCheckType.IsMinValue, true, false, null, false, false)]
    [TestCase(NumberCheckType.IsMinValue, true, true, null, true, false)]
    [TestCase(NumberCheckType.IsMinValue, true, null, null, null, false)]
    [TestCase(NumberCheckType.IsMinValue, true, false, null, null, null)]
    [TestCase(NumberCheckType.IsMinValue, true, false, true, true, null)]
    [TestCase(NumberCheckType.IsMinValue, true, false, false, false, null)]
    public void MultiConvert_WithDecimalMinValue_Converts(NumberCheckType checkType, bool? trueIs, bool? falseIs, bool? mixedIs, bool? expectation, bool? input)
    {
        _target.CheckType = checkType;
        _target.TrueIs = trueIs;
        _target.FalseIs = falseIs;
        _target.MixedIs = mixedIs;

        var numbers = input switch
        {
            true => [decimal.MinValue, decimal.MinValue, decimal.MinValue],
            false => [5, 4, 3],
            _ => new[] { 5, decimal.MinValue, decimal.MinValue }
        };

        MultiConvert(numbers.Cast<object>().ToArray(), expectation);
    }

    [TestCase(NumberCheckType.IsNegative, true, false, null, true, -5, -4, -3)]
    [TestCase(NumberCheckType.IsNegative, false, false, null, false, -5, -4, -3)]
    [TestCase(NumberCheckType.IsNegative, null, false, null, null, -5, -4, -3)]
    [TestCase(NumberCheckType.IsNegative, true, true, null, true, 5, 4, 3)]
    [TestCase(NumberCheckType.IsNegative, true, false, null, false, 5, 4, 3)]
    [TestCase(NumberCheckType.IsNegative, true, null, null, null, 5, 4, 3)]
    [TestCase(NumberCheckType.IsNegative, true, false, null, null, -5, 4, 3)]
    [TestCase(NumberCheckType.IsNegative, true, false, true, true, -5, 4, 3)]
    [TestCase(NumberCheckType.IsNegative, true, false, false, false, -5, 4, 3)]
    [TestCase(NumberCheckType.IsMaxValue, true, true, null, true, 5, 4, 3)]
    [TestCase(NumberCheckType.IsMaxValue, true, false, null, false, 5, 4, 3)]
    [TestCase(NumberCheckType.IsMaxValue, true, null, null, null, 5, 4, 3)]
    [TestCase(NumberCheckType.IsMinValue, true, true, null, true, 5, 4, 3)]
    [TestCase(NumberCheckType.IsMinValue, true, false, null, false, 5, 4, 3)]
    [TestCase(NumberCheckType.IsMinValue, true, null, null, null, 5, 4, 3)]
    [TestCase(NumberCheckType.IsEven, true, false, null, true, 4, 2, 0)]
    [TestCase(NumberCheckType.IsEven, false, false, null, false, 4, 2, 0)]
    [TestCase(NumberCheckType.IsEven, null, false, null, null, 4, 2, 0)]
    [TestCase(NumberCheckType.IsEven, true, true, null, true, 5, 3, 1)]
    [TestCase(NumberCheckType.IsEven, true, false, null, false, 5, 3, 1)]
    [TestCase(NumberCheckType.IsEven, true, null, null, null, 5, 3, 1)]
    [TestCase(NumberCheckType.IsEven, true, false, null, null, 4, 3, 1)]
    [TestCase(NumberCheckType.IsEven, true, false, true, true, 4, 3, 1)]
    [TestCase(NumberCheckType.IsEven, true, false, false, false, 4, 3, 1)]
    [TestCase(NumberCheckType.IsOdd, true, false, null, true, 5, 3, 1)]
    [TestCase(NumberCheckType.IsOdd, false, false, null, false, 5, 3, 1)]
    [TestCase(NumberCheckType.IsOdd, null, false, null, null, 5, 3, 1)]
    [TestCase(NumberCheckType.IsOdd, true, true, null, true, 4, 2, 0)]
    [TestCase(NumberCheckType.IsOdd, true, false, null, false, 4, 2, 0)]
    [TestCase(NumberCheckType.IsOdd, true, null, null, null, 4, 2, 0)]
    [TestCase(NumberCheckType.IsOdd, true, false, null, null, 5, 2, 0)]
    [TestCase(NumberCheckType.IsOdd, true, false, true, true, 5, 2, 0)]
    [TestCase(NumberCheckType.IsOdd, true, false, false, false, 5, 2, 0)]
    [TestCase(NumberCheckType.IsNaN, true, true, null, true, 5, 4, 3)]
    [TestCase(NumberCheckType.IsNaN, true, false, null, false, 5, 4, 3)]
    [TestCase(NumberCheckType.IsNaN, true, null, null, null, 5, 4, 3)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, true, null, true, 5, 4, 3)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, false, null, false, 5, 4, 3)]
    [TestCase(NumberCheckType.IsNegativeInfinity, true, null, null, null, 5, 4, 3)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, true, null, true, 5, 4, 3)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, false, null, false, 5, 4, 3)]
    [TestCase(NumberCheckType.IsPositiveInfinity, true, null, null, null, 5, 4, 3)]
    [TestCase(NumberCheckType.IsZero, true, true, null, true, 0, 0, 0)]
    [TestCase(NumberCheckType.IsZero, false, true, null, false, 0, 0, 0)]
    [TestCase(NumberCheckType.IsZero, null, true, null, null, 0, 0, 0)]
    [TestCase(NumberCheckType.IsZero, true, true, null, true, 5, 4, 3)]
    [TestCase(NumberCheckType.IsZero, true, false, null, false, 5, 4, 3)]
    [TestCase(NumberCheckType.IsZero, true, null, null, null, 5, 4, 3)]
    [TestCase(NumberCheckType.IsZero, true, false, null, null, 0, 4, 3)]
    [TestCase(NumberCheckType.IsZero, true, false, true, true, 0, 4, 3)]
    [TestCase(NumberCheckType.IsZero, true, false, false, false, 0, 4, 3)]
    public void MultiConvert_Called_Converts2(NumberCheckType checkType, bool? trueIs, bool? falseIs, bool? mixedIs, bool? expectation, params int[] input)
    {
        _target.CheckType = checkType;
        _target.TrueIs = trueIs;
        _target.FalseIs = falseIs;
        _target.MixedIs = mixedIs;

        var bigInteger = input.Select(x => new BigInteger(x)).Cast<object>().ToArray();
        MultiConvert(bigInteger, expectation);
    }

    [Test]
    public void ConvertBack_Called_RaisesException()
    {
        Assert.That(() => ConvertBack(null, null), Throws.TypeOf<NotImplementedException>());
    }

    [Test]
    public void MultiConvertBack_Called_RaisesException()
    {
        Assert.That(() => MultiConvertBack(null, []), Throws.TypeOf<NotImplementedException>());
    }
}